const e=JSON.parse('{"key":"v-95e58026","path":"/code/java/common/basic/reflection.html","title":"反射机制详解","lang":"zh-CN","frontmatter":{"title":"反射机制详解","date":"2020-08-18T00:00:00.000Z","category":"Java","tag":["Java基础"],"description":"何为反射？ 如果说大家研究过框架的底层原理或者咱们自己写过框架的话，一定对反射这个概念不陌生。 反射之所以被称为框架的灵魂，主要是因为它赋予了我们在运行时分析类以及执行类中方法的能力。 通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。 反射的应用场景了解么？ 像咱们平时大部分时候都是在写业务代码，很少会接触到直接使用反射机制的场景。 但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。","head":[["meta",{"property":"og:url","content":"https://began-zhao.github.io/code/java/common/basic/reflection.html"}],["meta",{"property":"og:site_name","content":"咖飞的博客"}],["meta",{"property":"og:title","content":"反射机制详解"}],["meta",{"property":"og:description","content":"何为反射？ 如果说大家研究过框架的底层原理或者咱们自己写过框架的话，一定对反射这个概念不陌生。 反射之所以被称为框架的灵魂，主要是因为它赋予了我们在运行时分析类以及执行类中方法的能力。 通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。 反射的应用场景了解么？ 像咱们平时大部分时候都是在写业务代码，很少会接触到直接使用反射机制的场景。 但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-19T03:27:59.000Z"}],["meta",{"property":"article:author","content":"咖飞"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:published_time","content":"2020-08-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-19T03:27:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反射机制详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-19T03:27:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咖飞\\",\\"url\\":\\"https://began-zhao.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"何为反射？","slug":"何为反射","link":"#何为反射","children":[]},{"level":2,"title":"反射的应用场景了解么？","slug":"反射的应用场景了解么","link":"#反射的应用场景了解么","children":[]},{"level":2,"title":"谈谈反射机制的优缺点","slug":"谈谈反射机制的优缺点","link":"#谈谈反射机制的优缺点","children":[]},{"level":2,"title":"反射实战","slug":"反射实战","link":"#反射实战","children":[{"level":3,"title":"获取 Class 对象的四种方式","slug":"获取-class-对象的四种方式","link":"#获取-class-对象的四种方式","children":[]},{"level":3,"title":"反射的一些基本操作","slug":"反射的一些基本操作","link":"#反射的一些基本操作","children":[]}]}],"git":{"createdTime":1702956479000,"updatedTime":1702956479000,"contributors":[{"name":"z-begun","email":"z-begun@outlook.com","commits":1}]},"readingTime":{"minutes":3.98,"words":1195},"filePathRelative":"code/java/common/basic/reflection.md","localizedDate":"2020年8月18日","excerpt":"<h2> 何为反射？</h2>\\n<p>如果说大家研究过框架的底层原理或者咱们自己写过框架的话，一定对反射这个概念不陌生。</p>\\n<p>反射之所以被称为框架的灵魂，主要是因为它赋予了我们在运行时分析类以及执行类中方法的能力。</p>\\n<p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p>\\n<h2> 反射的应用场景了解么？</h2>\\n<p>像咱们平时大部分时候都是在写业务代码，很少会接触到直接使用反射机制的场景。</p>\\n<p>但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。</p>","autoDesc":true}');export{e as data};
