const e=JSON.parse('{"key":"v-6098caf9","path":"/code/java/common/basic/why-there-only-value-passing-in-java.html","title":"为什么 Java 中只有值传递？","lang":"zh-CN","frontmatter":{"title":"为什么 Java 中只有值传递？","date":"2020-08-18T00:00:00.000Z","category":"Java","tag":["Java基础"],"description":"开始之前，我们先来搞懂下面这两个概念： 形参&amp;实参 值传递&amp;引用传递 形参&amp;实参 方法的定义可能会用到 参数（有参的方法），参数在程序语言中分为： 实参（实际参数） ：用于传递给函数/方法的参数，必须有确定的值。 形参（形式参数） ：用于定义函数/方法，接收实参，不需要有确定的值。 String hello = \\"Hello!\\"; // hello 为实参 sayHello(hello); // str 为形参 void sayHello(String str) { System.out.println(str); }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/code/java/common/basic/why-there-only-value-passing-in-java.html"}],["meta",{"property":"og:site_name","content":"咖飞的博客"}],["meta",{"property":"og:title","content":"为什么 Java 中只有值传递？"}],["meta",{"property":"og:description","content":"开始之前，我们先来搞懂下面这两个概念： 形参&amp;实参 值传递&amp;引用传递 形参&amp;实参 方法的定义可能会用到 参数（有参的方法），参数在程序语言中分为： 实参（实际参数） ：用于传递给函数/方法的参数，必须有确定的值。 形参（形式参数） ：用于定义函数/方法，接收实参，不需要有确定的值。 String hello = \\"Hello!\\"; // hello 为实参 sayHello(hello); // str 为形参 void sayHello(String str) { System.out.println(str); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-19T03:27:59.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"为什么 Java 中只有值传递？"}],["meta",{"property":"article:author","content":"咖飞"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:published_time","content":"2020-08-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-19T03:27:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"为什么 Java 中只有值传递？\\",\\"image\\":[\\"https://mister-hope.github.io/\\"],\\"datePublished\\":\\"2020-08-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-19T03:27:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咖飞\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"形参&实参","slug":"形参-实参","link":"#形参-实参","children":[]},{"level":2,"title":"值传递&引用传递","slug":"值传递-引用传递","link":"#值传递-引用传递","children":[]},{"level":2,"title":"为什么 Java 只有值传递？","slug":"为什么-java-只有值传递","link":"#为什么-java-只有值传递","children":[{"level":3,"title":"案例1：传递基本类型参数","slug":"案例1-传递基本类型参数","link":"#案例1-传递基本类型参数","children":[]},{"level":3,"title":"案例2：传递引用类型参数1","slug":"案例2-传递引用类型参数1","link":"#案例2-传递引用类型参数1","children":[]},{"level":3,"title":"案例3 ：传递引用类型参数2","slug":"案例3-传递引用类型参数2","link":"#案例3-传递引用类型参数2","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1702956479000,"updatedTime":1702956479000,"contributors":[{"name":"z-begun","email":"z-begun@outlook.com","commits":1}]},"readingTime":{"minutes":3.62,"words":1085},"filePathRelative":"code/java/common/basic/why-there-only-value-passing-in-java.md","localizedDate":"2020年8月18日","excerpt":"<p>开始之前，我们先来搞懂下面这两个概念：</p>\\n<ul>\\n<li>形参&amp;实参</li>\\n<li>值传递&amp;引用传递</li>\\n</ul>\\n<h2> 形参&amp;实参</h2>\\n<p>方法的定义可能会用到 <strong>参数</strong>（有参的方法），参数在程序语言中分为：</p>\\n<ul>\\n<li><strong>实参（实际参数）</strong> ：用于传递给函数/方法的参数，必须有确定的值。</li>\\n<li><strong>形参（形式参数）</strong> ：用于定义函数/方法，接收实参，不需要有确定的值。</li>\\n</ul>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span> hello <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Hello!\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// hello 为实参</span>\\n<span class=\\"token function\\">sayHello</span><span class=\\"token punctuation\\">(</span>hello<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">// str 为形参</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">sayHello</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> str<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span>str<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
