import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c,b as n,d as a,e as t,f as i}from"./app-4Zcd0y0J.js";const l="/begun-blog/assets/k1-0-kmk9gAwg.png",u="/begun-blog/assets/k1-1-71nxlaHz.png",r={},k=i('<h1 id="缓存之王-上" tabindex="-1"><a class="header-anchor" href="#缓存之王-上" aria-hidden="true">#</a> 缓存之王-上</h1><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><p>在业务中出现流量高峰的场景下，例如电商秒杀，APP活动首页访问。对于MySql 等传统的关系型数据库已经不足以支撑，很容易造成数据库的宕机，随着缓存技术的出现很好的解决了这个问题。<strong>缓存</strong>是计算机系统中必不可少的一种解决性能问题的方法，常见的应用包括CPU缓存、操作系统缓存、本地缓存、分布式缓存、HTTP缓存、数据库缓存等。其<strong>核心就是用空间换时间</strong>，通过分配一块高速存储区域（一般来说是内存）来提高数据的读写效率。</p><h1 id="为什么要使用缓存" tabindex="-1"><a class="header-anchor" href="#为什么要使用缓存" aria-hidden="true">#</a> 为什么要使用缓存</h1><p>在前面的介绍中，其实能明确缓存能起到的作用了。由于是存储在内存中，数据的读取会跳过部分直接从磁盘读取的步骤，在大量减少对数据库访问压力的情况下，保证应用的并发量和性能。所以缓存能给我们系统带来的好处就是<strong>高性能</strong>和<strong>高并发。</strong></p><ul><li><strong>高性能</strong>：在一些读请求变化频率不是很高的情况下，将结果放在缓存中省略磁盘读取的步骤，可以很直接的对应用性能带来提升。</li><li><strong>高并发</strong>：类似 mysql 的关系性数据库，对于并发的支持并没有那么友好，单机 2000 QPS已经不错了。但是对于 redis 之类的缓存来说， 功能简单，说白了就是 key-value 操作，单机的支撑量可以很轻松的达到几万到10几万，缓存是走内存的，内存天然就支持高并发。</li></ul><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="缓存的分类" tabindex="-1"><a class="header-anchor" href="#缓存的分类" aria-hidden="true">#</a> 缓存的分类</h1><p>缓存基本上可以分为三类：本地缓存、分布式缓存、多级缓存</p><p>根据缓存和应用程序是否属于同一个进程，将缓存分为<strong>本地缓存</strong>和<strong>分布式缓存。<strong>基于本地缓存和分布式缓存都有各自的优点和缺点，后面又出现了</strong>多级缓存</strong>的概念。</p><ul><li>**本地缓存：**是指和应用程序在同一个进程内的内存空间去存储数据，数据的读写都是在同一个进程内完成的。</li><li>**分布式缓存：**分布式缓存是独立部署的服务进程，并且和应用程序没有部署在同一台服务器上，所以是需要通过远程网络请求来完成分布式缓存的读写操作，并且分布式缓存主要应用在应用程序集群部署的环境下。</li><li>**多级缓存：**基于本地缓存和分布式缓存的优缺点，多级缓存应运而生，在实际的业务开发中一般也是采用多级缓存。**本地缓存一般存储更新频率低，访问频率高数据，分布式缓存一般存储更新频率较高的数据。**所以在业务开发中，我们通常使用本地缓存作为一级缓存，分布式缓存作为二级缓存。</li></ul><h1 id="本地缓存介绍及方案选型" tabindex="-1"><a class="header-anchor" href="#本地缓存介绍及方案选型" aria-hidden="true">#</a> 本地缓存介绍及方案选型</h1><p>本文先介绍对于本地缓存的使用及Java中的一些实现。分布式缓存和多级缓存会涉及到更多并发的问题和缓存一致性的问题，我们后续文章讨论。</p><p>Java的本地缓存很早就有了相关的标准**<code>javax.cache</code> ，<strong>要求的特性包括原子操作、缓存读写、缓存事件监听器、数据统计内容等。实际在工作中本地缓存主要用于</strong>特别频繁访问的稳定数据**，不然带来的数据不一致会得不偿失。</p><p>基于已有的规范，也出现了比较优秀的缓存实现方式，包括比较常用的<strong>Guava Cache、Caffeine和Encache。</strong></p><h2 id="concurrenthashmap-实现本地缓存" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-实现本地缓存" aria-hidden="true">#</a> <strong>ConcurrentHashMap 实现本地缓存</strong></h2><p>缓存的本质就是存储在内存中的 KV 数据结构，所以最简单的缓存对应的就是 jdk 中线程安全的ConcurrentHashMap，但是要实现缓存，还需要考虑淘汰、最大限制、缓存过期时间淘汰等等功能。</p><p>**优点：**实现简单，不需要引入第三方包，比较适合一些简单的业务场景。缺点是如果需要更多的特性，需要定制化开发，成本会比较高，并且稳定性和可靠性也难以保障。对于比较复杂的场景，建议使用比较稳定的开源工具。</p><h2 id="guava-cache-实现本地缓存" tabindex="-1"><a class="header-anchor" href="#guava-cache-实现本地缓存" aria-hidden="true">#</a> <strong>Guava Cache 实现本地缓存</strong></h2><p>Guava是Google团队开源的一款 Java 核心增强库，包含集合、并发原语、缓存、IO、反射等工具箱，性能和稳定性上都有保障，应用十分广泛。其缓存创建方式包括<code>cacheLoader</code>和<code>callable callback</code>两种，前者针对整个<code>cache</code>，而后者比较灵活可以在<code>get</code>时指定。Guava Cache支持很多特性，例如：</p><ul><li><p>支持最大容量限制：maximumSize(long)</p></li><li><p>支持两种过期删除策略:</p><blockquote><p>expireAfterAccess(long, TimeUnit)：在这个时间段内没有被读/写访问，就会被回收。</p></blockquote><blockquote><p>expireAfterWrite(long, TimeUnit)：在这个时间段内没有被写访问，就会被回收 。</p></blockquote></li><li><p>支持简单的统计功能</p></li><li><p>基于LRU算法实现</p></li><li><p>监听事件：removalListener(RemovalListener)</p></li></ul><p>下面是一个简单的使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CacheService</span> <span class="token punctuation">{</span>
    <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">// 初始容量</span>
            <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>     <span class="token comment">// 最大缓存数，超出淘汰</span>
            <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span> <span class="token comment">// 过期时间</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">tCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> orderId <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取orderInfo，如果key不存在，callable中调用getInfo方法返回数据</span>
        <span class="token class-name">String</span> orderInfo <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;orderInfo = {}&quot;</span><span class="token punctuation">,</span> orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 当redis缓存不存在查db</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;get data from mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        info <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;{orderId=%s}&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取的值为:&quot;</span><span class="token operator">+</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> info<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="caffeine实现本地缓存" tabindex="-1"><a class="header-anchor" href="#caffeine实现本地缓存" aria-hidden="true">#</a> <strong>Caffeine实现本地缓存</strong></h2><p>Caffeine 是基于 java8 实现的新一代缓存工具，缓存性能接近理论最优，可以看作是<strong>Guava Cache的增强版</strong>，功能上两者类似，不同的是Caffeine采用了一种结合 LRU、LFU 优点的算法：W-TinyLFU，在性能上有明显的优越性。</p><p>简单的使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//应用依赖如下</span>
dependencies <span class="token punctuation">{</span>
    implementation&#39;com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>ben<span class="token operator">-</span>manes<span class="token punctuation">.</span>caffeine<span class="token operator">:</span>caffeine<span class="token operator">:</span><span class="token number">2.8</span><span class="token number">.4</span>&#39;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaffeineServiceTestImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CaffeineServiceTest</span> <span class="token punctuation">{</span>
    <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">initialCapacity</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
            <span class="token comment">// 超出时淘汰</span>
            <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token comment">//设置写缓存后n秒钟过期</span>
            <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span>
            <span class="token comment">//设置读写缓存后n秒钟过期,实际很少用到,类似于expireAfterWrite</span>
            <span class="token comment">//.expireAfterAccess(17, TimeUnit.SECONDS)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">tCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> orderId <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取orderInfo，如果key不存在，callable中调用getInfo方法返回数据</span>
        <span class="token class-name">String</span> orderInfo <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> key <span class="token operator">-&gt;</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;orderInfo = {}&quot;</span><span class="token punctuation">,</span> orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 当redis缓存不存在查db</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;get data from mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        info <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;{orderId=%s}&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取的值为:&quot;</span><span class="token operator">+</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> info<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="encache-实现本地缓存" tabindex="-1"><a class="header-anchor" href="#encache-实现本地缓存" aria-hidden="true">#</a> Encache 实现本地缓存</h2><p>Encache 也是一个纯Java的进程内缓存框架，而且是Hibernate中默认的CacheProvider。同 Caffeine 和 Guava Cache 相比，Encache 的功能更加丰富，扩展性更强：</p><ul><li>支持多种缓存淘汰算法，包括 LRU、LFU和FIFO</li><li>缓存支持堆内存储、堆外存储、磁盘存储（支持持久化）三种</li><li>支持多种集群方案，解决数据共享问题</li></ul><p>简单的使用示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//引入依赖如下</span>
dependencies <span class="token punctuation">{</span>
    implementation&#39;org<span class="token punctuation">.</span>ehcache<span class="token operator">:</span>ehcache<span class="token operator">:</span><span class="token number">3.9</span><span class="token number">.7</span>&#39;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EhcacheServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CacheService</span> <span class="token punctuation">{</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ORDER_CACHE</span> <span class="token operator">=</span> <span class="token string">&quot;orderCache&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">CacheManager</span> cacheManager <span class="token operator">=</span> <span class="token class-name">CacheManagerBuilder</span><span class="token punctuation">.</span><span class="token function">newCacheManagerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">// 创建cache实例</span>
            <span class="token punctuation">.</span><span class="token function">withCache</span><span class="token punctuation">(</span><span class="token constant">ORDER_CACHE</span><span class="token punctuation">,</span> <span class="token class-name">CacheConfigurationBuilder</span>
                    <span class="token comment">// 声明一个容量为20的堆内缓存</span>
                    <span class="token punctuation">.</span><span class="token function">newCacheConfigurationBuilder</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResourcePoolsBuilder</span><span class="token punctuation">.</span><span class="token function">heap</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取cache实例</span>
    <span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> cacheManager<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token constant">ORDER_CACHE</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">tCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> orderId <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取orderInfo，如果key不存在，callable中调用getInfo方法返回数据</span>
        <span class="token class-name">String</span> orderInfo <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            orderInfo <span class="token operator">=</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;orderInfo = {}&quot;</span><span class="token punctuation">,</span> orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">&quot;bb&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 当redis缓存不存在查db</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;get data from mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        info <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;{orderId=%s}&quot;</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;获取的值为:&quot;</span><span class="token operator">+</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> info<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="本地缓存方案对比" tabindex="-1"><a class="header-anchor" href="#本地缓存方案对比" aria-hidden="true">#</a> 本地缓存方案对比</h1><ul><li>Guava Cache 易用性强，并且已有十分成熟的接入方案，使用简单</li><li>Caffeine 功能与 Guava Cache 类似，但是过期算法有部分优化，性能非常优秀</li><li>Encache 功能比较丰富，提供了持久化和集群的功能，但是这些功能对于其他分布式缓存框架优势比较有限、</li></ul><p>上面的代码样例都非常简单的形式体现，主要是为了方便理解。对于真正的使用中**<code>Spring Cache</code>** 规范提供了非常方便的注解使用方式，真实开发过程也大部分使用注解形式。这部分内容后面会以 Java 缓存规范文章内容系统性的解释。</p><h1 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h1><p>本文主要介绍了：</p><ul><li>什么是缓存。对于开发过程中，我们为什么会使用到缓存，缓存可以为我们的系统带来什么好处。</li><li>常见的 Java 缓存框架介绍：Guava Cache 、Caffeine和Encache 基本使用方式。</li><li>本地缓存框架的优劣对比，介绍在开发过程中，我们会正确使用本地缓存的方式。</li></ul><p>当然，我们也有说到分布式缓存和多级缓存。这需要我们更多的中心在分布式情况下的一些缓存框架的高可用问题以及缓存一致性的问题。后面文章也会逐步展开介绍。</p>`,44),d={href:"https://cloud.tencent.com/developer/article/2176479",target:"_blank",rel:"noopener noreferrer"},v={href:"https://cloud.tencent.com/developer/article/1028722",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/xiaocui1995/article/details/127043464",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/7220292698854752313",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/qq_41921994/article/details/109313445",target:"_blank",rel:"noopener noreferrer"};function b(h,S){const s=p("ExternalLinkIcon");return o(),c("div",null,[k,n("p",null,[n("a",d,[a("JAVA缓存规范 —— 虽迟但到的JCache API与天生不俗的Spring Cache-腾讯云开发者社区-腾讯云 (tencent.com)"),t(s)])]),n("p",null,[n("a",v,[a("Java缓存深入理解-腾讯云开发者社区-腾讯云 (tencent.com)"),t(s)])]),n("p",null,[n("a",m,[a("Java实现本地缓存、分布式缓存及多级缓存_java 缓存-CSDN博客"),t(s)])]),n("p",null,[n("a",f,[a("SpringBoot项目中使用缓存Cache的正确姿势！！! - 掘金 (juejin.cn)"),t(s)])]),n("p",null,[n("a",g,[a("springboot集成本地缓存Caffeine的三种使用方式_springboot mybatis cache caffeine 运用-CSDN博客"),t(s)])])])}const I=e(r,[["render",b],["__file","cache-king-1.html.vue"]]);export{I as default};
