const e=JSON.parse('{"key":"v-6380fbad","path":"/code/java/common/basic/java-basic-questions-03.html","title":"Java基础知识&面试题总结(下)","lang":"zh-CN","frontmatter":{"title":"Java基础知识&面试题总结(下)","date":"2020-08-18T00:00:00.000Z","category":"Java","tag":["Java基础"],"description":"异常 Java 异常类层次结构图概览 ： types-of-exceptions-in-java Exception 和 Error 有什么区别？ 在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类: Exception :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。 Error ：Error 属于程序无法处理的错误 ，我们没办法通过 catch 来进行捕获不建议通过catch捕获 。例如 Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。","head":[["meta",{"property":"og:url","content":"https://began-zhao.github.io/begun-blog/code/java/common/basic/java-basic-questions-03.html"}],["meta",{"property":"og:site_name","content":"咖飞的博客"}],["meta",{"property":"og:title","content":"Java基础知识&面试题总结(下)"}],["meta",{"property":"og:description","content":"异常 Java 异常类层次结构图概览 ： types-of-exceptions-in-java Exception 和 Error 有什么区别？ 在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类: Exception :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。 Error ：Error 属于程序无法处理的错误 ，我们没办法通过 catch 来进行捕获不建议通过catch捕获 。例如 Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://began-zhao.github.io/begun-blog/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-19T03:27:59.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Java基础知识&面试题总结(下)"}],["meta",{"property":"article:author","content":"咖飞"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:published_time","content":"2020-08-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-19T03:27:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础知识&面试题总结(下)\\",\\"image\\":[\\"https://began-zhao.github.io/begun-blog/\\"],\\"datePublished\\":\\"2020-08-18T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-19T03:27:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"咖飞\\",\\"url\\":\\"https://began-zhao.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"Exception 和 Error 有什么区别？","slug":"exception-和-error-有什么区别","link":"#exception-和-error-有什么区别","children":[]},{"level":3,"title":"Checked Exception 和 Unchecked Exception 有什么区别？","slug":"checked-exception-和-unchecked-exception-有什么区别","link":"#checked-exception-和-unchecked-exception-有什么区别","children":[]},{"level":3,"title":"Throwable 类常用方法有哪些？","slug":"throwable-类常用方法有哪些","link":"#throwable-类常用方法有哪些","children":[]},{"level":3,"title":"try-catch-finally 如何使用？","slug":"try-catch-finally-如何使用","link":"#try-catch-finally-如何使用","children":[]},{"level":3,"title":"finally 中的代码一定会执行吗？","slug":"finally-中的代码一定会执行吗","link":"#finally-中的代码一定会执行吗","children":[]},{"level":3,"title":"如何使用 try-with-resources 代替try-catch-finally？","slug":"如何使用-try-with-resources-代替try-catch-finally","link":"#如何使用-try-with-resources-代替try-catch-finally","children":[]},{"level":3,"title":"异常使用有哪些需要注意的地方？","slug":"异常使用有哪些需要注意的地方","link":"#异常使用有哪些需要注意的地方","children":[]}]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"什么是泛型？有什么作用？","slug":"什么是泛型-有什么作用","link":"#什么是泛型-有什么作用","children":[]},{"level":3,"title":"泛型的使用方式有哪几种？","slug":"泛型的使用方式有哪几种","link":"#泛型的使用方式有哪几种","children":[]},{"level":3,"title":"项目中哪里用到了泛型？","slug":"项目中哪里用到了泛型","link":"#项目中哪里用到了泛型","children":[]}]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"何为反射？","slug":"何为反射","link":"#何为反射","children":[]},{"level":3,"title":"反射机制优缺点","slug":"反射机制优缺点","link":"#反射机制优缺点","children":[]},{"level":3,"title":"反射的应用场景","slug":"反射的应用场景","link":"#反射的应用场景","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[]},{"level":2,"title":"I/O","slug":"i-o","link":"#i-o","children":[{"level":3,"title":"什么是序列化?什么是反序列化?","slug":"什么是序列化-什么是反序列化","link":"#什么是序列化-什么是反序列化","children":[]},{"level":3,"title":"Java 序列化中如果有些字段不想进行序列化，怎么办？","slug":"java-序列化中如果有些字段不想进行序列化-怎么办","link":"#java-序列化中如果有些字段不想进行序列化-怎么办","children":[]},{"level":3,"title":"获取用键盘输入常用的两种方法","slug":"获取用键盘输入常用的两种方法","link":"#获取用键盘输入常用的两种方法","children":[]},{"level":3,"title":"Java 中 IO 流分为几种?","slug":"java-中-io-流分为几种","link":"#java-中-io-流分为几种","children":[]},{"level":3,"title":"既然有了字节流,为什么还要有字符流?","slug":"既然有了字节流-为什么还要有字符流","link":"#既然有了字节流-为什么还要有字符流","children":[]}]}],"git":{"createdTime":1702956479000,"updatedTime":1702956479000,"contributors":[{"name":"z-begun","email":"z-begun@outlook.com","commits":1}]},"readingTime":{"minutes":14.49,"words":4346},"filePathRelative":"code/java/common/basic/java-basic-questions-03.md","localizedDate":"2020年8月18日","excerpt":"<h2> 异常</h2>\\n<p><strong>Java 异常类层次结构图概览</strong> ：</p>\\n<figure><figcaption>types-of-exceptions-in-java</figcaption></figure>\\n<h3> Exception 和 Error 有什么区别？</h3>\\n<p>在 Java 中，所有的异常都有一个共同的祖先 <code>java.lang</code> 包中的 <code>Throwable</code> 类。<code>Throwable</code> 类有两个重要的子类:</p>\\n<ul>\\n<li><strong><code>Exception</code></strong> :程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</li>\\n<li><strong><code>Error</code></strong> ：<code>Error</code> 属于程序无法处理的错误 ，<s>我们没办法通过 <code>catch</code> 来进行捕获</s>不建议通过<code>catch</code>捕获 。例如 Java 虚拟机运行错误（<code>Virtual MachineError</code>）、虚拟机内存不够错误(<code>OutOfMemoryError</code>)、类定义错误（<code>NoClassDefFoundError</code>）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</li>\\n</ul>","autoDesc":true}');export{e as data};
